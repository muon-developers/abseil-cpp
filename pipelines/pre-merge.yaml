# pre-merge pipeline
# triggered on PR only

trigger: none

pr:
- master

stages:
- stage: Bazel_Build
  displayName: Build
  jobs:
  - job: Build
    pool:
      name: 'VMSSPool'

    steps: 
    - script: az extension add -n azure-devops
      displayName: 'Install Azure DevOps Extension'

    - script: echo ${AZURE_DEVOPS_CLI_PAT} | az devops login
      env:
        AZURE_DEVOPS_CLI_PAT: $(System.AccessToken)
      displayName: 'Login Azure DevOps Extension'

    - script: |
        bazel version
      displayName: 'Show Bazel Version'

    # - script: |
    #     bazel clean --expunge
    #   displayName: 'Bazel Clean'

    - script: |
        bazel build ...
      displayName: 'Bazel Build' 


    # Record build information in files to be packaged
    - script: '
        echo Binary Abseil built from run number $(Build.BuildNumber)
        from Build $(Build.DefinitionName), triggered by $(Build.Reason)
        from repo $(Build.Repository.Name) 
        >bazel-out/k8-fastbuild/bin/absl/version.txt'
      displayName: 'Record Abseil Build Version'


    # Compress files into .7z, .tar.gz, or .zip
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'bazel-out/k8-fastbuild/bin/absl' 
        #includeRootFolder: true 
        archiveType: 'tar' # Options: zip, 7z, tar, wim
        tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).tar.gz' 
        replaceExistingArchive: true 
        verbose: true # Optional

    # Now upload to Azure Artifacts under the binaries Stream
    - task: UniversalPackages@0
      displayName: 'Publish Artifacts'
      inputs:
        command: publish
        publishDirectory: '$(Build.ArtifactStagingDirectory)'
        vstsFeedPublish: 'minerva-poc-github/binaries'
        vstsFeedPackagePublish: 'abseil'
        versionOption: patch
        packagePublishDescription: >
          Binary Abseil built from run number $(Build.BuildNumber)
          from Build $(Build.DefinitionName), triggered by $(Build.Reason)
          from repo $(Build.Repository.Name)
